name: Playwright E2E Tests

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]

jobs:
  test:
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright Browsers
        run: bunx playwright install --with-deps chromium

      - name: Initialize test database
        run: bun run db:test:init
        env:
          NODE_ENV: test
          DB_PATH: test.db

      - name: Seed test database
        run: bun run db:test:seed
        env:
          NODE_ENV: test
          DB_PATH: test.db

      - name: Run Playwright tests
        id: playwright
        run: bun --bun run build && bunx playwright test --reporter=json > test-results.json || echo "TESTS_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true
        env:
          NODE_ENV: test
          DB_PATH: test.db
          GITHUB_CLIENT_ID: test_client
          GITHUB_CLIENT_SECRET: test_secret
          GITHUB_AUTHORIZATION_CALLBACK_URL: http://localhost:4173/auth/callback
          SEED_DATABASE: none
          ANTHROPIC_API_KEY: mock_anthropic_key
          YOUTUBE_API_KEY: mock_youtube_key
          GITHUB_TOKEN: mock_github_token

      - name: Generate test summary
        if: always()
        run: |
          echo "# Playwright Test Results üé≠" >> $GITHUB_STEP_SUMMARY
          if [ -f test-results.json ]; then
            PASSED=$(bunx playwright show-report test-results.json 2>/dev/null | grep -oP '\d+(?= passed)' || echo "0")
            FAILED=$(bunx playwright show-report test-results.json 2>/dev/null | grep -oP '\d+(?= failed)' || echo "0")
            echo "‚úÖ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let testResults = '## üé≠ Playwright Test Results\n\n';

            try {
              const output = require('child_process').execSync('bunx playwright show-report --reporter=list', {encoding: 'utf-8'});
              const lines = output.split('\n');
              const summary = lines.find(line => line.includes('passed') || line.includes('failed'));

              if (summary) {
                testResults += summary.includes('failed')
                  ? '‚ùå **Tests Failed**\n\n'
                  : '‚úÖ **All Tests Passed**\n\n';
                testResults += '```\n' + summary + '\n```\n\n';
              }
            } catch (error) {
              testResults += '‚ö†Ô∏è Could not parse test results\n\n';
            }

            testResults += '\nüìä [View detailed test report in workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testResults
            });

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

      - name: Fail workflow if tests failed
        if: env.TESTS_FAILED == 'true'
        run: exit 1
